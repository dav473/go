// source: hello.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() { return this || window || global || self || Function('return this')(); }).call(null);

goog.exportSymbol('proto.NetworkStatus', null, global);
goog.exportSymbol('proto.ServerStatusRequest', null, global);
goog.exportSymbol('proto.ServerStatusResponse', null, global);
goog.exportSymbol('proto.SystemLoad', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerStatusRequest.displayName = 'proto.ServerStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ServerStatusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ServerStatusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ServerStatusResponse.displayName = 'proto.ServerStatusResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SystemLoad = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SystemLoad.repeatedFields_, null);
};
goog.inherits(proto.SystemLoad, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SystemLoad.displayName = 'proto.SystemLoad';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NetworkStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NetworkStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NetworkStatus.displayName = 'proto.NetworkStatus';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerStatusRequest}
 */
proto.ServerStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerStatusRequest;
  return proto.ServerStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerStatusRequest}
 */
proto.ServerStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ServerStatusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ServerStatusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ServerStatusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerStatusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    responseuptime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responsememory: jspb.Message.getFieldWithDefault(msg, 2, ""),
    responsedisk: jspb.Message.getFieldWithDefault(msg, 3, ""),
    responsecpu: jspb.Message.getFieldWithDefault(msg, 4, ""),
    responseload: (f = msg.getResponseload()) && proto.SystemLoad.toObject(includeInstance, f),
    responsenetwork: (f = msg.getResponsenetwork()) && proto.NetworkStatus.toObject(includeInstance, f),
    responsecurrentnetwork: (f = msg.getResponsecurrentnetwork()) && proto.NetworkStatus.toObject(includeInstance, f),
    responseping: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ServerStatusResponse}
 */
proto.ServerStatusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ServerStatusResponse;
  return proto.ServerStatusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ServerStatusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ServerStatusResponse}
 */
proto.ServerStatusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponseuptime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsememory(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsedisk(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsecpu(value);
      break;
    case 5:
      var value = new proto.SystemLoad;
      reader.readMessage(value,proto.SystemLoad.deserializeBinaryFromReader);
      msg.setResponseload(value);
      break;
    case 6:
      var value = new proto.NetworkStatus;
      reader.readMessage(value,proto.NetworkStatus.deserializeBinaryFromReader);
      msg.setResponsenetwork(value);
      break;
    case 7:
      var value = new proto.NetworkStatus;
      reader.readMessage(value,proto.NetworkStatus.deserializeBinaryFromReader);
      msg.setResponsecurrentnetwork(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setResponseping(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ServerStatusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ServerStatusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ServerStatusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ServerStatusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponseuptime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponsememory();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResponsedisk();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getResponsecpu();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getResponseload();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.SystemLoad.serializeBinaryToWriter
    );
  }
  f = message.getResponsenetwork();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.NetworkStatus.serializeBinaryToWriter
    );
  }
  f = message.getResponsecurrentnetwork();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.NetworkStatus.serializeBinaryToWriter
    );
  }
  f = message.getResponseping();
  if (f !== 0) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * optional string responseUptime = 1;
 * @return {string}
 */
proto.ServerStatusResponse.prototype.getResponseuptime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ServerStatusResponse} returns this
 */
proto.ServerStatusResponse.prototype.setResponseuptime = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string responseMemory = 2;
 * @return {string}
 */
proto.ServerStatusResponse.prototype.getResponsememory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ServerStatusResponse} returns this
 */
proto.ServerStatusResponse.prototype.setResponsememory = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string responseDisk = 3;
 * @return {string}
 */
proto.ServerStatusResponse.prototype.getResponsedisk = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ServerStatusResponse} returns this
 */
proto.ServerStatusResponse.prototype.setResponsedisk = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string responseCpu = 4;
 * @return {string}
 */
proto.ServerStatusResponse.prototype.getResponsecpu = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ServerStatusResponse} returns this
 */
proto.ServerStatusResponse.prototype.setResponsecpu = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional SystemLoad responseLoad = 5;
 * @return {?proto.SystemLoad}
 */
proto.ServerStatusResponse.prototype.getResponseload = function() {
  return /** @type{?proto.SystemLoad} */ (
    jspb.Message.getWrapperField(this, proto.SystemLoad, 5));
};


/**
 * @param {?proto.SystemLoad|undefined} value
 * @return {!proto.ServerStatusResponse} returns this
*/
proto.ServerStatusResponse.prototype.setResponseload = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerStatusResponse} returns this
 */
proto.ServerStatusResponse.prototype.clearResponseload = function() {
  return this.setResponseload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerStatusResponse.prototype.hasResponseload = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional NetworkStatus responseNetwork = 6;
 * @return {?proto.NetworkStatus}
 */
proto.ServerStatusResponse.prototype.getResponsenetwork = function() {
  return /** @type{?proto.NetworkStatus} */ (
    jspb.Message.getWrapperField(this, proto.NetworkStatus, 6));
};


/**
 * @param {?proto.NetworkStatus|undefined} value
 * @return {!proto.ServerStatusResponse} returns this
*/
proto.ServerStatusResponse.prototype.setResponsenetwork = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerStatusResponse} returns this
 */
proto.ServerStatusResponse.prototype.clearResponsenetwork = function() {
  return this.setResponsenetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerStatusResponse.prototype.hasResponsenetwork = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional NetworkStatus responseCurrentNetwork = 7;
 * @return {?proto.NetworkStatus}
 */
proto.ServerStatusResponse.prototype.getResponsecurrentnetwork = function() {
  return /** @type{?proto.NetworkStatus} */ (
    jspb.Message.getWrapperField(this, proto.NetworkStatus, 7));
};


/**
 * @param {?proto.NetworkStatus|undefined} value
 * @return {!proto.ServerStatusResponse} returns this
*/
proto.ServerStatusResponse.prototype.setResponsecurrentnetwork = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ServerStatusResponse} returns this
 */
proto.ServerStatusResponse.prototype.clearResponsecurrentnetwork = function() {
  return this.setResponsecurrentnetwork(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ServerStatusResponse.prototype.hasResponsecurrentnetwork = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint64 responsePing = 8;
 * @return {number}
 */
proto.ServerStatusResponse.prototype.getResponseping = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ServerStatusResponse} returns this
 */
proto.ServerStatusResponse.prototype.setResponseping = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SystemLoad.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SystemLoad.prototype.toObject = function(opt_includeInstance) {
  return proto.SystemLoad.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SystemLoad} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SystemLoad.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SystemLoad}
 */
proto.SystemLoad.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SystemLoad;
  return proto.SystemLoad.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SystemLoad} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SystemLoad}
 */
proto.SystemLoad.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedFloat() : [reader.readFloat()]);
      for (var i = 0; i < values.length; i++) {
        msg.addStatus(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SystemLoad.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SystemLoad.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SystemLoad} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SystemLoad.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
};


/**
 * repeated float status = 1;
 * @return {!Array<number>}
 */
proto.SystemLoad.prototype.getStatusList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.SystemLoad} returns this
 */
proto.SystemLoad.prototype.setStatusList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.SystemLoad} returns this
 */
proto.SystemLoad.prototype.addStatus = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SystemLoad} returns this
 */
proto.SystemLoad.prototype.clearStatusList = function() {
  return this.setStatusList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NetworkStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.NetworkStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NetworkStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    upload: jspb.Message.getFieldWithDefault(msg, 1, 0),
    download: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NetworkStatus}
 */
proto.NetworkStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NetworkStatus;
  return proto.NetworkStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NetworkStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NetworkStatus}
 */
proto.NetworkStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUpload(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDownload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NetworkStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NetworkStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NetworkStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NetworkStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUpload();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getDownload();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 upload = 1;
 * @return {number}
 */
proto.NetworkStatus.prototype.getUpload = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.NetworkStatus} returns this
 */
proto.NetworkStatus.prototype.setUpload = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 download = 2;
 * @return {number}
 */
proto.NetworkStatus.prototype.getDownload = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.NetworkStatus} returns this
 */
proto.NetworkStatus.prototype.setDownload = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto);
