/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 0.0.0
 * source: hello.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class ServerStatusRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): ServerStatusRequest {
        const message = new ServerStatusRequest({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerStatusRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerStatusRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ServerStatusRequest {
        return ServerStatusRequest.deserialize(bytes);
    }
}
export class ServerStatusResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        responseUptime?: string;
        responseMemory?: string;
        responseDisk?: string;
        responseCpu?: string;
        responseLoad?: SystemLoad;
        responseNetwork?: NetworkStatus;
        responseCurrentNetwork?: NetworkStatus;
        responsePing?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("responseUptime" in data && data.responseUptime != undefined) {
                this.responseUptime = data.responseUptime;
            }
            if ("responseMemory" in data && data.responseMemory != undefined) {
                this.responseMemory = data.responseMemory;
            }
            if ("responseDisk" in data && data.responseDisk != undefined) {
                this.responseDisk = data.responseDisk;
            }
            if ("responseCpu" in data && data.responseCpu != undefined) {
                this.responseCpu = data.responseCpu;
            }
            if ("responseLoad" in data && data.responseLoad != undefined) {
                this.responseLoad = data.responseLoad;
            }
            if ("responseNetwork" in data && data.responseNetwork != undefined) {
                this.responseNetwork = data.responseNetwork;
            }
            if ("responseCurrentNetwork" in data && data.responseCurrentNetwork != undefined) {
                this.responseCurrentNetwork = data.responseCurrentNetwork;
            }
            if ("responsePing" in data && data.responsePing != undefined) {
                this.responsePing = data.responsePing;
            }
        }
    }
    get responseUptime() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set responseUptime(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get responseMemory() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set responseMemory(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get responseDisk() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set responseDisk(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get responseCpu() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set responseCpu(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get responseLoad() {
        return pb_1.Message.getWrapperField(this, SystemLoad, 5) as SystemLoad;
    }
    set responseLoad(value: SystemLoad) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_responseLoad() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get responseNetwork() {
        return pb_1.Message.getWrapperField(this, NetworkStatus, 6) as NetworkStatus;
    }
    set responseNetwork(value: NetworkStatus) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_responseNetwork() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get responseCurrentNetwork() {
        return pb_1.Message.getWrapperField(this, NetworkStatus, 7) as NetworkStatus;
    }
    set responseCurrentNetwork(value: NetworkStatus) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_responseCurrentNetwork() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get responsePing() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set responsePing(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        responseUptime?: string;
        responseMemory?: string;
        responseDisk?: string;
        responseCpu?: string;
        responseLoad?: ReturnType<typeof SystemLoad.prototype.toObject>;
        responseNetwork?: ReturnType<typeof NetworkStatus.prototype.toObject>;
        responseCurrentNetwork?: ReturnType<typeof NetworkStatus.prototype.toObject>;
        responsePing?: number;
    }): ServerStatusResponse {
        const message = new ServerStatusResponse({});
        if (data.responseUptime != null) {
            message.responseUptime = data.responseUptime;
        }
        if (data.responseMemory != null) {
            message.responseMemory = data.responseMemory;
        }
        if (data.responseDisk != null) {
            message.responseDisk = data.responseDisk;
        }
        if (data.responseCpu != null) {
            message.responseCpu = data.responseCpu;
        }
        if (data.responseLoad != null) {
            message.responseLoad = SystemLoad.fromObject(data.responseLoad);
        }
        if (data.responseNetwork != null) {
            message.responseNetwork = NetworkStatus.fromObject(data.responseNetwork);
        }
        if (data.responseCurrentNetwork != null) {
            message.responseCurrentNetwork = NetworkStatus.fromObject(data.responseCurrentNetwork);
        }
        if (data.responsePing != null) {
            message.responsePing = data.responsePing;
        }
        return message;
    }
    toObject() {
        const data: {
            responseUptime?: string;
            responseMemory?: string;
            responseDisk?: string;
            responseCpu?: string;
            responseLoad?: ReturnType<typeof SystemLoad.prototype.toObject>;
            responseNetwork?: ReturnType<typeof NetworkStatus.prototype.toObject>;
            responseCurrentNetwork?: ReturnType<typeof NetworkStatus.prototype.toObject>;
            responsePing?: number;
        } = {};
        if (this.responseUptime != null) {
            data.responseUptime = this.responseUptime;
        }
        if (this.responseMemory != null) {
            data.responseMemory = this.responseMemory;
        }
        if (this.responseDisk != null) {
            data.responseDisk = this.responseDisk;
        }
        if (this.responseCpu != null) {
            data.responseCpu = this.responseCpu;
        }
        if (this.responseLoad != null) {
            data.responseLoad = this.responseLoad.toObject();
        }
        if (this.responseNetwork != null) {
            data.responseNetwork = this.responseNetwork.toObject();
        }
        if (this.responseCurrentNetwork != null) {
            data.responseCurrentNetwork = this.responseCurrentNetwork.toObject();
        }
        if (this.responsePing != null) {
            data.responsePing = this.responsePing;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.responseUptime.length)
            writer.writeString(1, this.responseUptime);
        if (this.responseMemory.length)
            writer.writeString(2, this.responseMemory);
        if (this.responseDisk.length)
            writer.writeString(3, this.responseDisk);
        if (this.responseCpu.length)
            writer.writeString(4, this.responseCpu);
        if (this.has_responseLoad)
            writer.writeMessage(5, this.responseLoad, () => this.responseLoad.serialize(writer));
        if (this.has_responseNetwork)
            writer.writeMessage(6, this.responseNetwork, () => this.responseNetwork.serialize(writer));
        if (this.has_responseCurrentNetwork)
            writer.writeMessage(7, this.responseCurrentNetwork, () => this.responseCurrentNetwork.serialize(writer));
        if (this.responsePing != 0)
            writer.writeUint64(8, this.responsePing);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerStatusResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerStatusResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.responseUptime = reader.readString();
                    break;
                case 2:
                    message.responseMemory = reader.readString();
                    break;
                case 3:
                    message.responseDisk = reader.readString();
                    break;
                case 4:
                    message.responseCpu = reader.readString();
                    break;
                case 5:
                    reader.readMessage(message.responseLoad, () => message.responseLoad = SystemLoad.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.responseNetwork, () => message.responseNetwork = NetworkStatus.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.responseCurrentNetwork, () => message.responseCurrentNetwork = NetworkStatus.deserialize(reader));
                    break;
                case 8:
                    message.responsePing = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ServerStatusResponse {
        return ServerStatusResponse.deserialize(bytes);
    }
}
export class SystemLoad extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        status?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
        }
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
    }
    set status(value: number[]) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        status?: number[];
    }): SystemLoad {
        const message = new SystemLoad({});
        if (data.status != null) {
            message.status = data.status;
        }
        return message;
    }
    toObject() {
        const data: {
            status?: number[];
        } = {};
        if (this.status != null) {
            data.status = this.status;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.status.length)
            writer.writePackedFloat(1, this.status);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SystemLoad {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SystemLoad();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.status = reader.readPackedFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SystemLoad {
        return SystemLoad.deserialize(bytes);
    }
}
export class NetworkStatus extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        upload?: number;
        download?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("upload" in data && data.upload != undefined) {
                this.upload = data.upload;
            }
            if ("download" in data && data.download != undefined) {
                this.download = data.download;
            }
        }
    }
    get upload() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set upload(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get download() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set download(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        upload?: number;
        download?: number;
    }): NetworkStatus {
        const message = new NetworkStatus({});
        if (data.upload != null) {
            message.upload = data.upload;
        }
        if (data.download != null) {
            message.download = data.download;
        }
        return message;
    }
    toObject() {
        const data: {
            upload?: number;
            download?: number;
        } = {};
        if (this.upload != null) {
            data.upload = this.upload;
        }
        if (this.download != null) {
            data.download = this.download;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.upload != 0)
            writer.writeUint64(1, this.upload);
        if (this.download != 0)
            writer.writeUint64(2, this.download);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NetworkStatus {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NetworkStatus();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.upload = reader.readUint64();
                    break;
                case 2:
                    message.download = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): NetworkStatus {
        return NetworkStatus.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedServerStatusServiceService {
    static definition = {
        ServerStatus: {
            path: "/ServerStatusService/ServerStatus",
            requestStream: false,
            responseStream: true,
            requestSerialize: (message: ServerStatusRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ServerStatusRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ServerStatusResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ServerStatusResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract ServerStatus(call: grpc_1.ServerWritableStream<ServerStatusRequest, ServerStatusResponse>): void;
}
export class ServerStatusServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedServerStatusServiceService.definition, "ServerStatusService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    ServerStatus: GrpcStreamServiceInterface<ServerStatusRequest, ServerStatusResponse> = (message: ServerStatusRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<ServerStatusResponse> => {
        return super.ServerStatus(message, metadata, options);
    };
}
