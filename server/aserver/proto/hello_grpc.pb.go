// go get -u google.golang.org/protobuf/cmd/protoc-gen-go
// go install google.golang.org/protobuf/cmd/protoc-gen-go

// go get -u google.golang.org/grpc/cmd/protoc-gen-go-grpc
// go install google.golang.org/grpc/cmd/protoc-gen-go-grpc
// protoc --go_out=./proto --go-grpc_out=./proto ./proto/hello.proto
// export PATH="$PATH:$(go env GOPATH)/bin"
// npm install grpc_tools_node_protoc_ts --save-dev
// npm install @grpc/grpc-js
// protoc --plugin=protoc-gen-ts=../node_modules/.bin/protoc-gen-ts --ts_out=grpc_js:. hello.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.20.3
// source: proto/hello.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SayHelloService_SayHello_FullMethodName = "/SayHelloService/SayHello"
)

// SayHelloServiceClient is the client API for SayHelloService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SayHelloServiceClient interface {
	SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (SayHelloService_SayHelloClient, error)
}

type sayHelloServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSayHelloServiceClient(cc grpc.ClientConnInterface) SayHelloServiceClient {
	return &sayHelloServiceClient{cc}
}

func (c *sayHelloServiceClient) SayHello(ctx context.Context, in *SayHelloRequest, opts ...grpc.CallOption) (SayHelloService_SayHelloClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SayHelloService_ServiceDesc.Streams[0], SayHelloService_SayHello_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &sayHelloServiceSayHelloClient{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SayHelloService_SayHelloClient interface {
	Recv() (*SayHelloResponse, error)
	grpc.ClientStream
}

type sayHelloServiceSayHelloClient struct {
	grpc.ClientStream
}

func (x *sayHelloServiceSayHelloClient) Recv() (*SayHelloResponse, error) {
	m := new(SayHelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SayHelloServiceServer is the server API for SayHelloService service.
// All implementations must embed UnimplementedSayHelloServiceServer
// for forward compatibility
type SayHelloServiceServer interface {
	SayHello(*SayHelloRequest, SayHelloService_SayHelloServer) error
	mustEmbedUnimplementedSayHelloServiceServer()
}

// UnimplementedSayHelloServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSayHelloServiceServer struct {
}

func (UnimplementedSayHelloServiceServer) SayHello(*SayHelloRequest, SayHelloService_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedSayHelloServiceServer) mustEmbedUnimplementedSayHelloServiceServer() {}

// UnsafeSayHelloServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SayHelloServiceServer will
// result in compilation errors.
type UnsafeSayHelloServiceServer interface {
	mustEmbedUnimplementedSayHelloServiceServer()
}

func RegisterSayHelloServiceServer(s grpc.ServiceRegistrar, srv SayHelloServiceServer) {
	s.RegisterService(&SayHelloService_ServiceDesc, srv)
}

func _SayHelloService_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SayHelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SayHelloServiceServer).SayHello(m, &sayHelloServiceSayHelloServer{ServerStream: stream})
}

type SayHelloService_SayHelloServer interface {
	Send(*SayHelloResponse) error
	grpc.ServerStream
}

type sayHelloServiceSayHelloServer struct {
	grpc.ServerStream
}

func (x *sayHelloServiceSayHelloServer) Send(m *SayHelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

// SayHelloService_ServiceDesc is the grpc.ServiceDesc for SayHelloService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SayHelloService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "SayHelloService",
	HandlerType: (*SayHelloServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _SayHelloService_SayHello_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/hello.proto",
}
